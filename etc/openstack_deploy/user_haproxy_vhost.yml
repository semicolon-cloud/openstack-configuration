haproxy_base_service:
  haproxy_service_name: base
  haproxy_frontend_only: true
  haproxy_ssl: "{{ haproxy_ssl }}"
  haproxy_ssl_all_vips: true
  haproxy_port: "{{ haproxy_ssl | ternary(443,80) }}"
  haproxy_redirect_http_port: 80
  haproxy_balance_type: http
  haproxy_service_enabled: true
  haproxy_redirect_scheme: "{{ (haproxy_ssl_letsencrypt_enable | bool and haproxy_ssl | bool) | ternary('https if !{ ssl_fc } !{ path_beg /.well-known/acme-challenge/ }', 'https if !{ ssl_fc }') }}"
  haproxy_frontend_acls: "{{ (haproxy_ssl_letsencrypt_enable | bool and haproxy_ssl | bool) | ternary(haproxy_ssl_letsencrypt_acl, {}) }}"
  haproxy_frontend_raw: "{{ (haproxy_ssl | bool and haproxy_security_headers is defined) | ternary( haproxy_security_headers + [ haproxy_horizon_csp | default(haproxy_security_headers_csp)], []) }}"
  haproxy_maps:
    - 'use_backend %[req.hdr(host),lower,map(/etc/haproxy/route.map)]'
  haproxy_map_entries:
    - name: base_regex
      entries:
        - "#Regular expression map file - this comment is defined in the base frontend config"
    - name: route
      entries:
        - "# Host map file - lol"

# TODO: Do smth about this
haproxy_security_txt_service:
  haproxy_backend_only: true
  haproxy_service_name: security_txt
  haproxy_backend_nodes: []
  haproxy_balance_type: http
  haproxy_service_enabled: "{{ haproxy_security_txt_content is truthy }}"
  # https://sleeplessbeastie.eu/2020/05/11/how-to-serve-single-file-using-haproxy/
  haproxy_backend_arguments:
    - 'errorfile 503 /etc/haproxy/security.txt'
  haproxy_map_entries:
    - name: base_regex
      entries:
        - '.*/security.txt security_txt-back'
        
haproxy_letsencrypt_service:
  haproxy_service_name: letsencrypt
  haproxy_backend_nodes: "{{ groups['haproxy_all'] }}"
  backend_rise: 1
  backend_fall: 5
  interval: 4000
  haproxy_bind:
    - 127.0.0.1
  haproxy_port: "{{ haproxy_ssl_letsencrypt_certbot_backend_port }}"
  haproxy_balance_type: http
  haproxy_service_enabled: "{{ (haproxy_ssl_letsencrypt_enable | bool and haproxy_ssl | bool) }}"



haproxy_horizon_service:
  haproxy_backend_only: true    #only describe the backends, frontend is in `base` via haproxy_all group vars
  haproxy_service_name: horizon
  haproxy_backend_nodes: "{{ groups['horizon_all'] | default([]) }}"
  haproxy_backend_port: "{{ (horizon_backend_ssl | default(openstack_service_backend_ssl)) | ternary(443, 80) }}"
  haproxy_balance_type: http
  haproxy_balance_alg: source
  haproxy_backend_options:
    - "httpchk HEAD /auth/login/ HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck"
  haproxy_service_enabled: "{{ groups['horizon_all'] is defined and groups['horizon_all'] | length > 0 }}"
  haproxy_backend_ssl: "{{ horizon_backend_ssl | default(openstack_service_backend_ssl) }}"
  haproxy_backend_ca: "{{ horizon_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  haproxy_stick_table: "{{ openstack_haproxy_horizon_stick_table }}"
  haproxy_map_entries:
    - name: route
      order: 99
      #match any requests to the horizon backend
      entries:
        - 'cloud.seda.club horizon-back'

haproxy_placement_service:
  haproxy_service_name: placement
  haproxy_backend_nodes: "{{ groups['placement_all'] | default([]) }}"
  # haproxy_ssl: "{{ haproxy_ssl }}"
  # haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  haproxy_bind: "{{ [haproxy_bind_internal_lb_vip_address | default(internal_lb_vip_address)] }}"
  haproxy_port: 8780
  haproxy_balance_type: http
  haproxy_backend_options:
    - "httpchk GET / HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck"
  haproxy_backend_ssl: "{{ placement_backend_ssl | default(openstack_service_backend_ssl) }}"
  haproxy_backend_ca: "{{ placement_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  haproxy_accept_both_protocols: "{{ placement_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  haproxy_service_enabled: "{{ groups['placement_all'] is defined and groups['placement_all'] | length > 0 }}"
  haproxy_map_entries:
    - name: route
      entries:
        - 'placement.cloud.seda.club placement-back'


haproxy_zun_api_service:
  haproxy_service_name: zun_api
  haproxy_backend_nodes: "{{ groups['zun_api'] | default([]) }}"
  # haproxy_ssl: "{{ haproxy_ssl }}"
  # haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  haproxy_bind: "{{ [haproxy_bind_internal_lb_vip_address | default(internal_lb_vip_address)] }}"
  haproxy_port: 9517
  haproxy_balance_type: http
  haproxy_backend_options:
      - "httpchk GET /healthcheck HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck"
  haproxy_backend_ssl: "{{ zun_backend_ssl | default(openstack_service_backend_ssl) }}"
  haproxy_backend_ca: "{{ zun_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  haproxy_service_enabled: "{{ groups['zun_api'] is defined and groups['zun_api'] | length > 0 }}"
  haproxy_map_entries:
    - name: route
      entries:
        - 'container.cloud.seda.club zun_api-back'

haproxy_zun_console_service:
  haproxy_service_name: zun_console
  haproxy_backend_nodes: "{{ groups['zun_api'] | default([]) }}"
  # haproxy_ssl: "{{ haproxy_ssl }}"
  # haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  haproxy_port: 6784
  haproxy_bind: "{{ [haproxy_bind_internal_lb_vip_address | default(internal_lb_vip_address)] }}"
  haproxy_balance_type: http
  haproxy_timeout_client: 60m
  haproxy_timeout_server: 60m
  haproxy_balance_alg: source
  haproxy_backend_options:
    - "httpchk HEAD / HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck"
  haproxy_backend_httpcheck_options:
    - "expect status 405"
  # haproxy_backend_ssl disabled due to: https://bugs.launchpad.net/zun/+bug/2016917
  haproxy_backend_ssl: False
  haproxy_backend_ca: "{{ zun_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  haproxy_accept_both_protocols: "{{ zun_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  haproxy_service_enabled: "{{ groups['zun_api'] is defined and groups['zun_api'] | length > 0 }}"

  haproxy_map_entries:
    - name: route
      entries:
        - 'ws.container.cloud.seda.club zun_console-back'


haproxy_nova_api_compute_service:
  haproxy_service_name: nova_api_os_compute
  haproxy_backend_nodes: "{{ groups['nova_api_os_compute'] | default([]) }}"
  # haproxy_ssl: "{{ haproxy_ssl }}"
  # haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  haproxy_bind: "{{ [haproxy_bind_internal_lb_vip_address | default(internal_lb_vip_address)] }}"
  haproxy_port: 8774
  haproxy_balance_type: http
  haproxy_backend_options:
    - "httpchk HEAD / HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck"
  haproxy_backend_ssl: "{{ nova_backend_ssl | default(openstack_service_backend_ssl) }}"
  haproxy_backend_ca: "{{ nova_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  haproxy_accept_both_protocols: "{{ nova_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  haproxy_service_enabled: "{{ groups['nova_api_os_compute'] is defined and groups['nova_api_os_compute'] | length > 0 }}"

  haproxy_map_entries:
    - name: route
      entries:
        - 'compute.cloud.seda.club nova_api_os_compute-back'

haproxy_nova_spice_console_service:
  haproxy_service_name: nova_spice_console
  haproxy_backend_nodes: "{{ groups['nova_console'] | default([]) }}"
  # haproxy_ssl: "{{ haproxy_ssl }}"
  # haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  haproxy_port: "{{ nova_spice_html5proxy_base_port | default('6082') }}"
  haproxy_bind: "{{ [haproxy_bind_internal_lb_vip_address | default(internal_lb_vip_address)] }}"
  haproxy_balance_type: "{{ haproxy_nova_console_http_mode | ternary('http', 'tcp') }}"
  haproxy_timeout_client: 60m
  haproxy_timeout_server: 60m
  haproxy_balance_alg: source
  haproxy_backend_options: "{{ haproxy_nova_console_http_mode | ternary(['httpchk HEAD /spice_auto.html HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck'], []) }}"
  haproxy_backend_httpcheck_options: "{{ haproxy_nova_console_http_mode | ternary(['expect status 200'], []) }}"
  haproxy_backend_ssl: "{{ nova_backend_ssl | default(openstack_service_backend_ssl) }}"
  haproxy_backend_ca: "{{ nova_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  haproxy_accept_both_protocols: "{{ nova_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  haproxy_service_enabled: "{{ groups['nova_console'] is defined and groups['nova_console'] | length > 0 and nova_console_type == 'spice' }}"

  haproxy_map_entries:
    - name: route
      entries:
        - 'spice.compute.cloud.seda.club nova_spice_console-back'

haproxy_nova_serial_console_service:
  haproxy_service_name: nova_serial_console
  haproxy_backend_nodes: "{{ groups['nova_console'] | default([]) + ((ironic_console_type == 'serialconsole') | ternary(groups['ironic_console'] | default([]), [])) }}"
  # haproxy_ssl: "{{ haproxy_ssl }}"
  # haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  haproxy_port: "{{ nova_serialconsoleproxy_port | default('6083') }}"
  haproxy_bind: "{{ [haproxy_bind_internal_lb_vip_address | default(internal_lb_vip_address)] }}"
  haproxy_balance_type: "{{ haproxy_nova_console_http_mode | ternary('http', 'tcp') }}"
  haproxy_timeout_client: 60m
  haproxy_timeout_server: 60m
  haproxy_balance_alg: source
  haproxy_backend_options: "{{ haproxy_nova_console_http_mode | ternary(['httpchk HEAD / HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck'], []) }}"
  haproxy_backend_httpcheck_options: "{{ haproxy_nova_console_http_mode | ternary(['expect status 405'], []) }}"
  haproxy_backend_ssl: "{{ nova_backend_ssl | default(openstack_service_backend_ssl) }}"
  haproxy_backend_ca: "{{ nova_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  haproxy_accept_both_protocols: "{{ nova_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  haproxy_service_enabled: "{{ (groups['nova_console'] is defined and groups['nova_console'] | length > 0 and nova_console_type == 'serialconsole') or
                               (groups['ironic_console'] is defined and groups['ironic_console'] | length > 0 and ironic_console_type == 'serialconsole') }}"

  haproxy_map_entries:
    - name: route
      entries:
        - 'serialconsole.compute.cloud.seda.club nova_serial_console-back'


haproxy_nova_novnc_console_service:
  haproxy_service_name: nova_novnc_console
  haproxy_backend_nodes: "{{ groups['nova_console'] | default([]) }}"
  # haproxy_ssl: "{{ haproxy_ssl }}"
  # haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  haproxy_port: "{{ nova_novncproxy_port | default('6080') }}"
  haproxy_bind: "{{ [haproxy_bind_internal_lb_vip_address | default(internal_lb_vip_address)] }}"
  haproxy_balance_type: "{{ haproxy_nova_console_http_mode | ternary('http', 'tcp') }}"
  haproxy_timeout_client: 60m
  haproxy_timeout_server: 60m
  haproxy_balance_alg: source
  haproxy_backend_options: "{{ haproxy_nova_console_http_mode | ternary(['httpchk HEAD /vnc.html HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck'], []) }}"
  haproxy_backend_httpcheck_options: "{{ haproxy_nova_console_http_mode | ternary(['expect status 200'], []) }}"
  haproxy_backend_ssl: "{{ nova_backend_ssl | default(openstack_service_backend_ssl) }}"
  haproxy_backend_ca: "{{ nova_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  haproxy_accept_both_protocols: "{{ nova_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  haproxy_service_enabled: "{{ groups['nova_console'] is defined and groups['nova_console'] | length > 0 and nova_console_type == 'novnc' }}"

  haproxy_map_entries:
    - name: route
      entries:
        - 'novnc.compute.cloud.seda.club nova_novnc_console-back'

haproxy_neutron_server_service:
  haproxy_service_name: neutron_server
  haproxy_backend_nodes: "{{ groups['neutron_server'] | default([]) }}"
  haproxy_port: 9696
  # haproxy_ssl: "{{ haproxy_ssl }}"
  # haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  haproxy_bind: "{{ [haproxy_bind_internal_lb_vip_address | default(internal_lb_vip_address)] }}"
  haproxy_balance_type: http
  haproxy_backend_options:
    - "httpchk GET /healthcheck HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck"
  haproxy_backend_ssl: "{{ neutron_backend_ssl | default(openstack_service_backend_ssl) }}"
  haproxy_backend_ca: "{{ neutron_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  haproxy_accept_both_protocols: "{{ neutron_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  haproxy_service_enabled: "{{ groups['neutron_server'] is defined and groups['neutron_server'] | length > 0 }}"
  haproxy_map_entries:
    - name: route
      entries:
        - 'network.cloud.seda.club neutron_server-back'

haproxy_keystone_service:
  haproxy_service_name: keystone_service
  haproxy_backend_nodes: "{{ groups['keystone_all'] | default([])  }}"
  haproxy_port: 5000
  # haproxy_ssl: "{{ haproxy_ssl }}"
  # haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  haproxy_bind: "{{ [haproxy_bind_internal_lb_vip_address | default(internal_lb_vip_address)] }}"
  haproxy_balance_type: "http"
  haproxy_backend_options:
    - "httpchk HEAD /healthcheck HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck"
  haproxy_backend_ssl: "{{ keystone_backend_ssl | default(openstack_service_backend_ssl) }}"
  haproxy_backend_ca: "{{ keystone_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  haproxy_accept_both_protocols: "{{ keystone_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  haproxy_service_enabled: "{{ groups['keystone_all'] is defined and groups['keystone_all'] | length > 0 }}"
  haproxy_map_entries:
    - name: route
      entries:
        - 'identity.cloud.seda.club keystone_service-back'

haproxy_heat_api_service:
  haproxy_service_name: heat_api
  haproxy_backend_nodes: "{{ groups['heat_api'] | default([]) }}"
  haproxy_port: 8004
  # haproxy_ssl: "{{ haproxy_ssl }}"
  # haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  haproxy_bind: "{{ [haproxy_bind_internal_lb_vip_address | default(internal_lb_vip_address)] }}"
  haproxy_balance_type: http
  haproxy_backend_options:
    - "httpchk HEAD /healthcheck HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck"
  haproxy_backend_ssl: "{{ heat_backend_ssl | default(openstack_service_backend_ssl) }}"
  haproxy_backend_ca: "{{ heat_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  haproxy_accept_both_protocols: "{{ heat_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  haproxy_service_enabled: "{{ groups['heat_api'] is defined and groups['heat_api'] | length > 0 }}"
  haproxy_map_entries:
    - name: route
      entries:
        - 'orchestration.cloud.seda.club heat_api-back'

haproxy_heat_api_cfn_service:
  haproxy_service_name: heat_api_cfn
  haproxy_backend_nodes: "{{ groups['heat_api_cfn'] | default([]) }}"
  haproxy_port: 8000
  # haproxy_ssl: "{{ haproxy_ssl }}"
  # haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  haproxy_bind: "{{ [haproxy_bind_internal_lb_vip_address | default(internal_lb_vip_address)] }}"
  haproxy_balance_type: http
  haproxy_backend_options:
    - "httpchk HEAD /healthcheck HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck"
  haproxy_backend_ssl: "{{ heat_backend_ssl | default(openstack_service_backend_ssl) }}"
  haproxy_backend_ca: "{{ heat_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  haproxy_accept_both_protocols: "{{ heat_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  haproxy_service_enabled: "{{ groups['heat_api_cfn'] is defined and groups['heat_api_cfn'] | length > 0 }}"
  haproxy_map_entries:
    - name: route
      entries:
        - 'cloudformation.cloud.seda.club heat_api_cfn-back'
  
haproxy_glance_api_service:
  haproxy_service_name: glance_api
  haproxy_backend_nodes: "{{ groups['glance_api'] | default([]) }}"
  # haproxy_ssl: "{{ haproxy_ssl }}"
  # haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  haproxy_bind: "{{ [haproxy_bind_internal_lb_vip_address | default(internal_lb_vip_address)] }}"
  haproxy_port: 9292
  haproxy_balance_type: http
  haproxy_balance_alg: source
  haproxy_backend_options:
    - "httpchk GET /healthcheck HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck"
  haproxy_backend_ssl: "{{ (glance_use_uwsgi | default(True)) | ternary((glance_backend_ssl | default(openstack_service_backend_ssl)), False) }}"
  haproxy_backend_ca: "{{ glance_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  haproxy_accept_both_protocols: "{{ glance_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  haproxy_service_enabled: "{{ groups['glance_api'] is defined and groups['glance_api'] | length > 0 }}"
  haproxy_map_entries:
    - name: route
      entries:
        - 'image.cloud.seda.club glance_api-back'
  
haproxy_cinder_api_service:
  haproxy_service_name: cinder_api
  haproxy_backend_nodes: "{{ groups['cinder_api'] | default([]) }}"
  # haproxy_ssl: "{{ haproxy_ssl }}"
  # haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  haproxy_bind: "{{ [haproxy_bind_internal_lb_vip_address | default(internal_lb_vip_address)] }}"
  haproxy_port: 8776
  haproxy_balance_type: http
  haproxy_backend_options:
    - "httpchk HEAD /healthcheck HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck"
  haproxy_backend_ssl: "{{ cinder_backend_ssl | default(openstack_service_backend_ssl) }}"
  haproxy_backend_ca: "{{ cinder_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  haproxy_accept_both_protocols: "{{ cinder_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  haproxy_service_enabled: "{{ groups['cinder_api'] is defined and groups['cinder_api'] | length > 0 }}"
  haproxy_map_entries:
    - name: route
      entries:
        - 'volume.cloud.seda.club cinder_api-back'

haproxy_designate_api_service:
  haproxy_service_name: designate_api
  haproxy_backend_nodes: "{{ groups['designate_api'] | default([]) }}"
  # haproxy_ssl: "{{ haproxy_ssl }}"
  # haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  haproxy_bind: "{{ [haproxy_bind_internal_lb_vip_address | default(internal_lb_vip_address)] }}"
  haproxy_port: 9001
  haproxy_balance_type: http
  haproxy_backend_options:
    - "forwardfor"
    - "httpchk GET / HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck"
    - "httplog"
  haproxy_backend_ssl: "{{ designate_backend_ssl | default(openstack_service_backend_ssl) }}"
  haproxy_backend_ca: "{{ designate_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  haproxy_accept_both_protocols: "{{ designate_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  haproxy_service_enabled: "{{ groups['designate_api'] is defined and groups['designate_api'] | length > 0 }}"
  haproxy_map_entries:
    - name: route
      entries:
        - "designate.cloud.seda.club designate_api-back"

haproxy_swift_proxy_service:
  haproxy_service_name: swift_proxy
  haproxy_backend_nodes: "{{ groups['swift_proxy'] | default([]) }}"
  # haproxy_ssl: "{{ haproxy_ssl }}"
  # haproxy_ssl_all_vips: "{{ haproxy_ssl_all_vips }}"
  haproxy_balance_alg: source
  haproxy_port: 8080
  haproxy_balance_type: http
  haproxy_backend_options:
    - "httpchk GET /healthcheck HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck"
  # `openstack_service_backend_ssl` is not taken into account
  # because TLS in swift-proxy is only for testing purposes:
  # https://opendev.org/openstack/swift/src/commit/c78a5962b5f6c9e75f154cac924a226815236e98/etc/proxy-server.conf-sample
  haproxy_backend_ssl: "{{ swift_backend_ssl | default(False) }}"
  haproxy_backend_ca: "{{ swift_haproxy_backend_ca | default(openstack_haproxy_backend_ca) }}"
  haproxy_accept_both_protocols: "{{ swift_accept_both_protocols | default(openstack_service_accept_both_protocols) }}"
  haproxy_service_enabled: "{{ groups['swift_proxy'] is defined and groups['swift_proxy'] | length > 0 }}"
  haproxy_map_entries:
    - name: route
      entries:
        - 'swift.cloud.seda.club swift_proxy-back'